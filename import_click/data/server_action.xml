<odoo>

    <record id="import_click" model="ir.actions.server">
            <field name="name">=> Import Click</field>
            <field name="model_id" ref="model_account_click"/>
            <field name="binding_model_id" ref="model_account_click"/>
            <field name="state">code</field>
            <field name="code">
lineas, facturas, facturas_hechas = [], [], 0
payment_mode_id, invoice_payment_term_id = False, False
lineas = record.data.split('\n')

# Calcular el número de facturas a crear, quitando las líneas vacías:
for li in lineas:
  if (li[:6] not in facturas) and (li[:1] != ""):
    facturas.append(li[:6])

# Chequear si todas las facturas tienen línea de cliente o proveedor:
for fa in facturas:
  lineapartner = 0
  for li in lineas:
    secuencia = li[:6]
    if (secuencia == fa) and (li[18:19] == '4'):
      lineapartner = 1
  if (lineapartner == 0):
    raise UserError('Factura código ' + fa + ' sin código contable de cliente o proveedor reconocido.')

# Crear facturas, clientes, proveedores y datos del formulario:
for fa in facturas:
  ffactura, ref_proveedor = "", ""
  for li in lineas:
    secuencia = li[:6]
    if (secuencia == fa) and (li[18:19] == '4'):
      tipo_factura = li[18:20]
      ccclick = li[18:26]
      ffactura = datetime.date(int(li[7:11]), int(li[11:13]), int(li[13:15]))
      dh = li.split(";")[2]
      total   = li.split(";")[5]
      partner = li.split(";")[6]
      nif     = li.split(";")[7]
      calle   = li.split(";")[8]
      ciudad  = li.split(";")[9]
      provincia = li.split(";")[10]
      cp = li.split(";")[6]

      if (li[18:20] != '43'):
        ref_proveedor = li.split(";")[4]

      # Buscar partner, encontrar o crear (comentada versión 09/2022 por ref click en vez de NIF):
#    partner = env['res.partner'].search([('ref','ilike',ccclick)])
    partner = env['res.partner'].search([('vat','=',nif)])
    if not partner.id:
      partner = env['res.partner'].create({'name':partner, 'ref':ccclick, 'vat':nif, 'street':calle, 'city':ciudad, 'state_id':provincia,
        'zip':cp})

      # Comprobar el tipo de factura y crearla:
    ccpartner = partner.property_account_payable_id
    if (dh == 'H'):
      move_type = 'in_invoice'
      invoice_payment_term_id = partner.property_supplier_payment_term_id.id
      payment_mode_id = partner.supplier_payment_mode_id.id
    elif (dh == 'D'):
      move_type = 'in_refund'
    if (dh == 'H') and tipo_factura == '43':
      move_type = 'out_refund'
      ccpartner = partner.property_account_receivable_id
    elif (dh== 'D') and tipo_factura == '43':
      move_type = 'out_invoice'
      ccpartner = partner.property_account_receivable_id
      invoice_payment_term_id = partner.property_payment_term_id.id
      payment_mode_id = partner.customer_payment_mode_id.id

    # Nueva factura:
  newinvoice = env['account.move'].create({'move_type':move_type, 'partner_id':partner.id, 'invoice_date':ffactura, 'ref':ref_proveedor,
    'payment_mode_id': payment_mode_id, 'invoice_payment_term_id': invoice_payment_term_id})
  facturas_hechas += 1

    # Crear líneas en la factura anterior:
  for lipro in lineas:
    secuencia = lipro[:6]
    if (secuencia == fa) and (lipro[18:19] in ['6','7']):
      camposlinea = lipro.split(";")
      preciolinea = float(camposlinea[-1])
      codigoproductoclick = camposlinea[3]
      producto = env['product.product'].search([('barcode','=',codigoproductoclick)])
      if not producto.id:
        raise UserError('Código clic ' + str(codigoproductoclick) + ' NO ENCONTRADO en los campos barcode')

    # Analítica e impuestos del producto:
      analytic_id = producto.expense_analytic_account_id.id
      impuestos = producto.taxes_id
      if move_type in ['in_invoice', 'in_refund']:
        analytic_id = producto.income_analytic_account_id.id
        impuestos = producto.supplier_taxes_id
      newinvoice['invoice_line_ids'] = [(0,0,{'product_id':producto.id, 'analytic_account_id':analytic_id, 'tax_ids':impuestos, 'partner_id':partner.id, 'price_unit':preciolinea}),
                                     (0, 0, {'name':'/','account_id':ccpartner.id,'partner_id':partner.id,'exclude_from_invoice_tab':True})]

  # Datos informativos del formulario:
record.write({'invoice_export':len(facturas), 'invoice_import':facturas_hechas})


            </field>
    </record>

</odoo>
